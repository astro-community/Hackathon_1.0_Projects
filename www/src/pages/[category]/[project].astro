---
import NotionData from '../../data/notion.json'   
import { Markdown } from 'astro/components';
import Base from '../../layouts/Base.astro';
import formatCategoryString from '../../scripts/formatCategoryString';
import fetchREADMEfromGithub from '../../scripts/fetchREADMEfromGithub';
import { slugify } from '../../scripts/slugify';
import { prettyCategoryName } from '../../scripts/prettyCategoryName';

export async function getStaticPaths() {
     return await Promise.all(NotionData.map(async (record)=>{
         const category = formatCategoryString(record.Category) 
         return {
             params:{
                 category:category,
                 project: slugify(record.Name)
             },
             props:{
                 record,
                 readme: await fetchREADMEfromGithub(record.GitHub)
             }
         }
     }))
 }
const {category,project}=Astro.params
const {record,readme}=Astro.props


---
<Base title={record.Name}>
<div class="text-center space-y-2">
    <h1 class="text-5xl lg:text-6xl font-black">{record.Name}</h1>
    <p>by <span>{record.Author}</span></p>
    <p class="flex gap-4 place-content-center">
        {['GitHub', 'npm', 'Live Preview'].map(e => record[e] && <a href={record[e]} class="font-bold text-primary">{e}</a>)}
    </p>
</div>
<div class="container max-w-7xl mx-auto px-3 grid gap-8 lg:grid-cols-3">
    <div class="col-span-2">
        <div class="mockup-window mx-auto border border-primary bg-primary">
            <div class="p-4 bg-base-100 text-base-content">
                <a class="absolute w-full top-3.5 left-1/2 -translate-x-1/2 font-bold no-underline text-center" href={record.GitHub + '#readme'}>
                    <h3 class="text-sm text-primary-content">README.md</h3>
                </a>
                <div class="prose mx-auto py-8">
                    <Markdown content={readme} />
                </div>
            </div>
        </div>
    </div>
    <div class="space-y-8">
            <div class="prose">
                <h2>Category</h2>
                <p>{prettyCategoryName(category)}</p>
            {record.Description && (
                <h2>Description</h2>
                <Markdown content={record.Description} />
            )}
            </div>
        <div class="container text-center mx-auto">
            <a href="." class="btn btn-lg btn-block">‚Üê See all submissions</a>
        </div>
    </div>
</div>
</Base>
